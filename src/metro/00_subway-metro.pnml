// ======= BEGIN GATE TUBE =======

// Gate Tube Sprites
spriteset(gate_purchase_set, "gfx/graphics/tram/MTRO/Gate/GTubePurchase_0.png") {
	[-18, -5]
}

/* DISABLED
spriteset(gate_head_visible_set, "gfx/graphics/tram/MTRO/Gate/GTubeHead_0.png") {
	[-16, -5]
}

spriteset(gate_middle_visible_set, "gfx/graphics/tram/MTRO/Gate/GTubeMiddle_0.png") {
	[-16, -5]
}

spriteset(gate_tail_visible_set, "gfx/graphics/tram/MTRO/Gate/GTubeTail_0.png") {
	[-16, -5]
}
*/

spriteset(gate_head_visible_set, "gfx/graphics/tram/MTRO/Gate/GateFront_0.png") {
	template_tram_28(0, 60)
}

spriteset(gate_middle_visible_set, "gfx/graphics/tram/MTRO/Gate/GateMiddle_0.png") {
	template_tram_28(0, 60)
}

spriteset(gate_tail_visible_set, "gfx/graphics/tram/MTRO/Gate/GateBack_0.png") {
	template_tram_28(0, 60)
}



// Switches

// Articulated consist generation

switch (FEAT_ROADVEHS, SELF, gate_switch_articulated, extra_callback_info1) {
    1..7: return gate_tube;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// Gate tube visible, positional graphics switches

switch(FEAT_ROADVEHS, SELF, gate_tube_2_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1: 	    gate_tail_visible_set;
    2..7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, gate_tube_3_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1: 		gate_middle_visible_set;
	2: 		gate_tail_visible_set;
	3..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, gate_tube_4_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1..2: 	gate_middle_visible_set;
	3: 		gate_tail_visible_set;
	4..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, gate_tube_5_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1..3: 	gate_middle_visible_set;
	4: 		gate_tail_visible_set;
	5..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, gate_tube_6_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1..4: 	gate_middle_visible_set;
	5: 		gate_tail_visible_set;
	6..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, gate_tube_7_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1..5: 	gate_middle_visible_set;
	6: 		gate_tail_visible_set;
	7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, gate_tube_8_carriage_graphics_switch, position_in_consist) {
	0: 		gate_head_visible_set;
	1..6: 	gate_middle_visible_set;
	7: 		gate_tail_visible_set;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, gate_tube_consist_GFX_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: gate_tube_2_carriage_graphics_switch;
    1: gate_tube_3_carriage_graphics_switch;
    2: gate_tube_4_carriage_graphics_switch;
	3: gate_tube_5_carriage_graphics_switch;
	4: gate_tube_6_carriage_graphics_switch;
	5: gate_tube_7_carriage_graphics_switch;
	6: gate_tube_8_carriage_graphics_switch;
	return CB_FAILED;
}


// Underground vs. window switch

switch(FEAT_ROADVEHS, SELF, gate_tube_GFX_switch, extra_callback_info1) {
    /* Decide whether vehicle is drawn on map or in a special window  */
	0x00:			underground_tube_GFX_switch;
	0x10..0x12:		gate_tube_consist_GFX_switch;
	return gate_purchase_set;
}


// Refit cost switch

switch(FEAT_ROADVEHS, SELF, gate_refit_cost_switch, var[0x10,8,0xFF] - cargo_subtype) {
    /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	   Refitting to fewer carriages refunds money, while adding carriages costs money.        */
	-6:				-(6*5);
	-5:				-(5*5);
	-4:				-(4*5);
	-3:				-(3*5);
	-2:				-(2*5);
	-1:				-(1*5);
	0:				0;
	1:				(1*5);
	2:				(2*5);
	3:				(3*5);
	4:				(4*5);
	5:				(5*5);
	6:				(6*5);
	return CB_FAILED;
}


// Running cost switch

switch(FEAT_ROADVEHS, SELF, gate_running_cost_switch, current_speed) {
    /* Running cost reduced to 1/4 if vehicle is not moving. */
	0: 				((cargo_subtype+2)*33)/4;
	return 			(cargo_subtype+2)*33;
}


// Vehicle definition

item(FEAT_ROADVEHS, gate_tube) {
	property {
		name:               			string(STR_NAME_TUBE_GATE);
		climates_available: 			bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
		introduction_date: 				date(1903,1,1);
		model_life:						52;
		misc_flags:						bitmask(ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
		retire_early:					10;
		vehicle_life:					30;
		sprite_id:						SPRITE_ID_NEW_ROADVEH;
		speed:            	 			65 km/h;
		power:							300 hp;
		tractive_effort_coefficient:	0.123;
		weight:							46 ton;
		cargo_capacity:					40;
		loading_speed:					100;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS, CC_MAIL);
		refit_cost:						0;
		cost_factor:					65;
		running_cost_base:				RUNNING_COST_ROADVEH;
		running_cost_factor:			132;
		length:							7;
		cargo_age_period:				90;
		tram_type:                    	MAB3;
	}
	graphics {
		articulated_part:				gate_switch_articulated;
		default:						gate_tube_GFX_switch;
		purchase:						gate_purchase_set;
		cargo_capacity:					tube_cargo_capacities_switch;
		running_cost_factor:			gate_running_cost_switch;
		purchase_running_cost_factor:	return 2*33;
		power:							return (cargo_subtype+2)*15;
		weight:							return (cargo_subtype+2)*93;
		length:							tube_shorten_vehicles;
		sound_effect:					return sound("src/none.wav");
		cargo_subtype_text:				tube_cargo_subtype_text;
		additional_text:				return string(STR_TUBE_PURCHASE_TEXT);
		refit_cost:						gate_refit_cost_switch;
	}
}

// If the tram param is set, make this a tram

if (param_RV0_or_tram1 == 1) {
	item (FEAT_ROADVEHS, gate_tube) {
		property {
			misc_flags:						bitmask(ROADVEH_FLAG_NO_BREAKDOWN_SMOKE, ROADVEH_FLAG_TRAM);
		}
	}
}

// ======= END GATE TUBE =======

//====================================================================================================================================

// ======= BEGIN NEW WORKS TUBE =======

// New Works Tube Sprites
spriteset(new_works_purchase_set, "gfx/graphics/tram/MTRO/New Works/NWTubePurchase_0.png") {
	[-18, -5]
}

spriteset(new_works_head_visible_set, "gfx/graphics/tram/MTRO/New Works/NWTubeHead_0.png") {
	[-16, -5]
}

spriteset(new_works_middle_visible_set, "gfx/graphics/tram/MTRO/New Works/NWTubeMiddle_0.png") {
	[-16, -5]
}

spriteset(new_works_tail_visible_set, "gfx/graphics/tram/MTRO/New Works/NWTubeTail_0.png") {
	[-16, -5]
}


// Switches

// Articulated consist generation

switch (FEAT_ROADVEHS, SELF, new_works_switch_articulated, extra_callback_info1) {
    1..7: return new_works_tube;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// New works tube visible, positional graphics switches

switch(FEAT_ROADVEHS, SELF, new_works_tube_2_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1: 	    new_works_tail_visible_set;
    2..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_3_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1: 		new_works_middle_visible_set;
	2: 		new_works_tail_visible_set;
	3..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_4_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1..2: 	new_works_middle_visible_set;
	3: 		new_works_tail_visible_set;
	4..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_5_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1..3: 	new_works_middle_visible_set;
	4: 		new_works_tail_visible_set;
	5..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_6_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1..4: 	new_works_middle_visible_set;
	5: 		new_works_tail_visible_set;
	6..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_7_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1..5: 	new_works_middle_visible_set;
	6: 		new_works_tail_visible_set;
	7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_8_carriage_graphics_switch, position_in_consist) {
	0: 		new_works_head_visible_set;
	1..6: 	new_works_middle_visible_set;
	7: 		new_works_tail_visible_set;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, new_works_tube_consist_GFX_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: new_works_tube_2_carriage_graphics_switch;
    1: new_works_tube_3_carriage_graphics_switch;
    2: new_works_tube_4_carriage_graphics_switch;
	3: new_works_tube_5_carriage_graphics_switch;
	4: new_works_tube_6_carriage_graphics_switch;
	5: new_works_tube_7_carriage_graphics_switch;
	6: new_works_tube_8_carriage_graphics_switch;
	return CB_FAILED;
}


// Underground vs. window switch

switch(FEAT_ROADVEHS, SELF, new_works_tube_GFX_switch, extra_callback_info1) {
    /* Decide whether vehicle is drawn on map or in a special window  */
	0x00:			underground_tube_GFX_switch;
	0x10..0x12:		new_works_tube_consist_GFX_switch;
	return new_works_purchase_set;
}


// Refit cost switch

switch(FEAT_ROADVEHS, SELF, new_works_refit_cost_switch, var[0x10,8,0xFF] - cargo_subtype) {
    /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	   Refitting to fewer carriages refunds money, while adding carriages costs money.        */
	-6:				-(6*7);
	-5:				-(5*7);
	-4:				-(4*7);
	-3:				-(3*7);
	-2:				-(2*7);
	-1:				-(1*7);
	0:				0;
	1:				(1*7);
	2:				(2*7);
	3:				(3*7);
	4:				(4*7);
	5:				(5*7);
	6:				(6*7);
	return CB_FAILED;
}


// Running cost switch

switch(FEAT_ROADVEHS, SELF, new_works_running_cost_switch, current_speed) {
    /* Running cost reduced to 1/4 if vehicle is not moving. */
	0: 				((cargo_subtype+2)*40)/4;
	return 			(cargo_subtype+2)*40;
}


// Vehicle definition

item(FEAT_ROADVEHS, new_works_tube) {
	property {
		name:               			string(STR_NAME_TUBE_NEW_WORKS);
		climates_available: 			bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
		introduction_date: 				date(1938,1,1);
		model_life:						57;
		misc_flags:						bitmask(ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
		retire_early:					10;
		vehicle_life:					30;
		sprite_id:						SPRITE_ID_NEW_ROADVEH;
		speed:            	 			72 km/h;
		power:							400 hp;
		tractive_effort_coefficient:	0.138;
		weight:							48 ton;
		cargo_capacity:					40;
		loading_speed:					100;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS, CC_MAIL);
		refit_cost:						0;
		cost_factor:					86;
		running_cost_base:				RUNNING_COST_ROADVEH;
		running_cost_factor:			158;
		length:							7;
		cargo_age_period:				92;
		tram_type:                    	MAB3;
	}
	graphics {
		articulated_part:				new_works_switch_articulated;
		default:						new_works_tube_GFX_switch;
		purchase:						new_works_purchase_set;
		cargo_capacity:					tube_cargo_capacities_switch;
		running_cost_factor:			new_works_running_cost_switch;
		purchase_running_cost_factor:	return 2*40;
		power:							return (cargo_subtype+2)*20;
		weight:							return (cargo_subtype+2)*96;
		length:							tube_shorten_vehicles;
		sound_effect:					return sound("src/none.wav");
		cargo_subtype_text:				tube_cargo_subtype_text;
		additional_text:				return string(STR_TUBE_PURCHASE_TEXT);
		refit_cost:						new_works_refit_cost_switch;
	}
}

// If the tram param is set, make this a tram

if (param_RV0_or_tram1 == 1) {
	item (FEAT_ROADVEHS, new_works_tube) {
		property {
			misc_flags:						bitmask(ROADVEH_FLAG_NO_BREAKDOWN_SMOKE, ROADVEH_FLAG_TRAM);
		}
	}
}

// ======= END NEW WORKS TUBE =======

//====================================================================================================================================

// ======= BEGIN VICTORIA TUBE =======

// Victoria Tube Sprites
spriteset(victoria_purchase_set, "gfx/graphics/tram/MTRO/Victoria/VTubePurchase_0.png") {
	[-18, -5]
}

spriteset(victoria_head_visible_set, "gfx/graphics/tram/MTRO/Victoria/VTubeHead_0.png") {
	[-16, -5]
}

spriteset(victoria_middle_visible_set, "gfx/graphics/tram/MTRO/Victoria/VTubeMiddle_0.png") {
	[-16, -5]
}

spriteset(victoria_tail_visible_set, "gfx/graphics/tram/MTRO/Victoria/VTubeTail_0.png") {
	[-16, -5]
}


// Switches

// Articulated consist generation

switch (FEAT_ROADVEHS, SELF, victoria_switch_articulated, extra_callback_info1) {
    1..7: return victoria_tube;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// Victoria tube visible, positional graphics switches

switch(FEAT_ROADVEHS, SELF, victoria_tube_2_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1: 	    victoria_tail_visible_set;
    2..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, victoria_tube_3_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1: 		victoria_middle_visible_set;
	2: 		victoria_tail_visible_set;
	3..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, victoria_tube_4_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1..2: 	victoria_middle_visible_set;
	3: 		victoria_tail_visible_set;
	4..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, victoria_tube_5_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1..3: 	victoria_middle_visible_set;
	4: 		victoria_tail_visible_set;
	5..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, victoria_tube_6_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1..4: 	victoria_middle_visible_set;
	5: 		victoria_tail_visible_set;
	6..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, victoria_tube_7_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1..5: 	victoria_middle_visible_set;
	6: 		victoria_tail_visible_set;
	7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, victoria_tube_8_carriage_graphics_switch, position_in_consist) {
	0: 		victoria_head_visible_set;
	1..6: 	victoria_middle_visible_set;
	7: 		victoria_tail_visible_set;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, victoria_tube_consist_GFX_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: victoria_tube_2_carriage_graphics_switch;
    1: victoria_tube_3_carriage_graphics_switch;
    2: victoria_tube_4_carriage_graphics_switch;
	3: victoria_tube_5_carriage_graphics_switch;
	4: victoria_tube_6_carriage_graphics_switch;
	5: victoria_tube_7_carriage_graphics_switch;
	6: victoria_tube_8_carriage_graphics_switch;
	return CB_FAILED;
}


// Underground vs. window switch

switch(FEAT_ROADVEHS, SELF, victoria_tube_GFX_switch, extra_callback_info1) {
    /* Decide whether vehicle is drawn on map or in a special window  */
	0x00:			underground_tube_GFX_switch;
	0x10..0x12:		victoria_tube_consist_GFX_switch;
	return victoria_purchase_set;
}


// Refit cost switch

switch(FEAT_ROADVEHS, SELF, victoria_refit_cost_switch, var[0x10,8,0xFF] - cargo_subtype) {
    /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	   Refitting to fewer carriages refunds money, while adding carriages costs money.        */
	-6:				-(6*8);
	-5:				-(5*8);
	-4:				-(4*8);
	-3:				-(3*8);
	-2:				-(2*8);
	-1:				-(1*8);
	0:				0;
	1:				(1*8);
	2:				(2*8);
	3:				(3*8);
	4:				(4*8);
	5:				(5*8);
	6:				(6*8);
	return CB_FAILED;
}


// Running cost switch

switch(FEAT_ROADVEHS, SELF, victoria_running_cost_switch, current_speed) {
    /* Running cost reduced to 1/4 if vehicle is not moving. */
	0: 				((cargo_subtype+2)*46)/4;
	return 			(cargo_subtype+2)*46;
}


// Vehicle definition

item(FEAT_ROADVEHS, victoria_tube) {
	property {
		name:               			string(STR_NAME_TUBE_VICTORIA);
		climates_available: 			bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
		introduction_date: 				date(1967,1,1);
		model_life:						53;
		misc_flags:						bitmask(ROADVEH_FLAG_2CC, ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
		retire_early:					10;
		vehicle_life:					30;
		sprite_id:						SPRITE_ID_NEW_ROADVEH;
		speed:            	 			80 km/h;
		power:							500 hp;
		tractive_effort_coefficient:	0.186;
		weight:							44 ton;
		cargo_capacity:					40;
		loading_speed:					100;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS, CC_MAIL);
		refit_cost:						0;
		cost_factor:					95;
		running_cost_base:				RUNNING_COST_ROADVEH;
		running_cost_factor:			184;
		length:							7;
		cargo_age_period:				108;
		tram_type:                    	MAB3;
	}
	graphics {
		articulated_part:				victoria_switch_articulated;
		default:						victoria_tube_GFX_switch;
		purchase:						victoria_purchase_set;
		cargo_capacity:					tube_cargo_capacities_switch;
		running_cost_factor:			victoria_running_cost_switch;
		purchase_running_cost_factor:	return 2*46;
		power:							return (cargo_subtype+2)*25;
		weight:							return (cargo_subtype+2)*88;
		length:							tube_shorten_vehicles;
		sound_effect:					return sound("src/none.wav");
		cargo_subtype_text:				tube_cargo_subtype_text;
		additional_text:				return string(STR_TUBE_PURCHASE_TEXT);
		refit_cost:						victoria_refit_cost_switch;
	}
}

// If the tram param is set, make this a tram

if (param_RV0_or_tram1 == 1) {
	item (FEAT_ROADVEHS, victoria_tube) {
		property {
			misc_flags:						bitmask(ROADVEH_FLAG_TRAM, ROADVEH_FLAG_2CC, ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
		}
	}
}

// ======= END VICTORIA TUBE =======

//====================================================================================================================================

// ======= BEGIN ADTRANZ TUBE =======

// Adtranz Tube Sprites
spriteset(adtranz_purchase_set, "gfx/graphics/tram/MTRO/Adtranz/ATubePurchase_0.png") {
	[-18, -5]
}

spriteset(adtranz_head_visible_set, "gfx/graphics/tram/MTRO/Adtranz/ATubeHead_0.png") {
	[-16, -5]
}

spriteset(adtranz_middle_visible_set, "gfx/graphics/tram/MTRO/Adtranz/ATubeMiddle_0.png") {
	[-16, -5]
}

spriteset(adtranz_tail_visible_set, "gfx/graphics/tram/MTRO/Adtranz/ATubeTail_0.png") {
	[-16, -5]
}


// Switches

// Articulated consist generation

switch (FEAT_ROADVEHS, SELF, adtranz_switch_articulated, extra_callback_info1) {
    1..7: return adtranz_tube;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// Adtranz tube visible, positional graphics switches

switch(FEAT_ROADVEHS, SELF, adtranz_tube_2_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1:   	adtranz_tail_visible_set;
    2..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, adtranz_tube_3_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1: 		adtranz_middle_visible_set;
	2: 		adtranz_tail_visible_set;
	3..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, adtranz_tube_4_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1..2: 	adtranz_middle_visible_set;
	3: 		adtranz_tail_visible_set;
	4..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, adtranz_tube_5_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1..3: 	adtranz_middle_visible_set;
	4: 		adtranz_tail_visible_set;
	5..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, adtranz_tube_6_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1..4: 	adtranz_middle_visible_set;
	5: 		adtranz_tail_visible_set;
	6..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, adtranz_tube_7_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1..5: 	adtranz_middle_visible_set;
	6: 		adtranz_tail_visible_set;
	7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, adtranz_tube_8_carriage_graphics_switch, position_in_consist) {
	0: 		adtranz_head_visible_set;
	1..6: 	adtranz_middle_visible_set;
	7: 		adtranz_tail_visible_set;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, adtranz_tube_consist_GFX_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: adtranz_tube_2_carriage_graphics_switch;
    1: adtranz_tube_3_carriage_graphics_switch;
    2: adtranz_tube_4_carriage_graphics_switch;
	3: adtranz_tube_5_carriage_graphics_switch;
	4: adtranz_tube_6_carriage_graphics_switch;
	5: adtranz_tube_7_carriage_graphics_switch;
	6: adtranz_tube_8_carriage_graphics_switch;
	return CB_FAILED;
}


// Underground vs. window switch

switch(FEAT_ROADVEHS, SELF, adtranz_tube_GFX_switch, extra_callback_info1) {
    /* Decide whether vehicle is drawn on map or in a special window  */
	0x00:			underground_tube_GFX_switch;
	0x10..0x12:		adtranz_tube_consist_GFX_switch;
	return adtranz_purchase_set;
}


// Refit cost switch

switch(FEAT_ROADVEHS, SELF, adtranz_refit_cost_switch, var[0x10,8,0xFF] - cargo_subtype) {
    /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	   Refitting to fewer carriages refunds money, while adding carriages costs money.        */
	-6:				-(6*10);
	-5:				-(5*10);
	-4:				-(4*10);
	-3:				-(3*10);
	-2:				-(2*10);
	-1:				-(1*10);
	0:				0;
	1:				(1*10);
	2:				(2*10);
	3:				(3*10);
	4:				(4*10);
	5:				(5*10);
	6:				(6*10);
	return CB_FAILED;
}


// Running cost switch

switch(FEAT_ROADVEHS, SELF, adtranz_running_cost_switch, current_speed) {
    /* Running cost reduced to 1/4 if vehicle is not moving. */
	0: 				((cargo_subtype+2)*53)/4;
	return 			(cargo_subtype+2)*53;
}


// Vehicle definition

item(FEAT_ROADVEHS, adtranz_tube) {
	property {
		name:               			string(STR_NAME_TUBE_ADTRANZ);
		climates_available: 			bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
		introduction_date: 				date(1992,1,1);
		model_life:						75;
		misc_flags:						bitmask(ROADVEH_FLAG_2CC, ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
		vehicle_life:					30;
		sprite_id:						SPRITE_ID_NEW_ROADVEH;
		speed:            	 			100 km/h;
		power:							600 hp;
		tractive_effort_coefficient:	0.179;
		weight:							46 ton;
		cargo_capacity:					40;
		loading_speed:					100;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS, CC_MAIL);
		refit_cost:						0;
		cost_factor:					119;
		running_cost_base:				RUNNING_COST_ROADVEH;
		running_cost_factor:			212;
		length:							7;
		cargo_age_period:				120;
		tram_type:                    	MAB3;
	}
	graphics {
		articulated_part:				adtranz_switch_articulated;
		default:						adtranz_tube_GFX_switch;
		purchase:						adtranz_purchase_set;
		cargo_capacity:					tube_cargo_capacities_switch;
		running_cost_factor:			adtranz_running_cost_switch;
		purchase_running_cost_factor:	return 2*53;
		power:							return (cargo_subtype+2)*30;
		weight:							return (cargo_subtype+2)*93;
		length:							tube_shorten_vehicles;
		sound_effect:					return sound("src/none.wav");
		cargo_subtype_text:				tube_cargo_subtype_text;
		additional_text:				return string(STR_TUBE_PURCHASE_TEXT);
		refit_cost:						adtranz_refit_cost_switch;
	}
}

// If the tram param is set, make this a tram

if (param_RV0_or_tram1 == 1) {
	item (FEAT_ROADVEHS, adtranz_tube) {
		property {
			misc_flags:						bitmask(ROADVEH_FLAG_TRAM, ROADVEH_FLAG_2CC, ROADVEH_FLAG_NO_BREAKDOWN_SMOKE);
		}
	}
}

// ======= END ADTRANZ TUBE =======

// ======= BEGIN CHIKATETSU E1 FUTURISTIC =======

// ChikatetsuE4 Sprites
spriteset(ChikatetsuE1_purchase_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE1Purchase_0.png") {
	[-18, -6]
}

spriteset(ChikatetsuE1_head_visible_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE1Head_0.png") {
	[-16, -5]
}

spriteset(ChikatetsuE1_middle_visible_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE1Middle_0.png") {
	[-16, -5]
}

spriteset(ChikatetsuE1_tail_visible_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE1Tail_0.png") {
	[-16, -5]
}


// Switches

// Articulated consist generation

switch (FEAT_ROADVEHS, SELF, ChikatetsuE1_switch_articulated, extra_callback_info1) {
    1..7: return ChikatetsuE1;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// Capacity switches

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_2_carriage_capacity_switch, position_in_consist) {
	0..1: return 80+(param_capacities*120);
    2..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_3_carriage_capacity_switch, position_in_consist) {
	0..2: return 80+(param_capacities*120);
	3..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_4_carriage_capacity_switch, position_in_consist) {
	0..3: return 80+(param_capacities*120);
	4..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_5_carriage_capacity_switch, position_in_consist) {
	0..4: return 80+(param_capacities*120);
	5..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_6_carriage_capacity_switch, position_in_consist) {
	0..5: return 80+(param_capacities*120);
	6..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_7_carriage_capacity_switch, position_in_consist) {
	0..6: return 80+(param_capacities*120);
	7: return 0;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_cargo_capacities_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: ChikatetsuE1_2_carriage_capacity_switch;
    1: ChikatetsuE1_3_carriage_capacity_switch;
    2: ChikatetsuE1_4_carriage_capacity_switch;
	3: ChikatetsuE1_5_carriage_capacity_switch;
	4: ChikatetsuE1_6_carriage_capacity_switch;
	5: ChikatetsuE1_7_carriage_capacity_switch;
	// 8-carriage vehicles need no reduction in capacity
	return 80+(param_capacities*120);
}

// ChikatetsuE1 visible, positional graphics switches

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_2_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1: 	    ChikatetsuE1_tail_visible_set;
    2..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_3_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1: 		ChikatetsuE1_middle_visible_set;
	2: 		ChikatetsuE1_tail_visible_set;
	3..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_4_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1..2: 	ChikatetsuE1_middle_visible_set;
	3: 		ChikatetsuE1_tail_visible_set;
	4..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_5_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1..3: 	ChikatetsuE1_middle_visible_set;
	4: 		ChikatetsuE1_tail_visible_set;
	5..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_6_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1..4: 	ChikatetsuE1_middle_visible_set;
	5: 		ChikatetsuE1_tail_visible_set;
	6..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_7_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1..5: 	ChikatetsuE1_middle_visible_set;
	6: 		ChikatetsuE1_tail_visible_set;
	7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_8_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE1_head_visible_set;
	1..6: 	ChikatetsuE1_middle_visible_set;
	7: 		ChikatetsuE1_tail_visible_set;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_consist_GFX_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: ChikatetsuE1_2_carriage_graphics_switch;
    1: ChikatetsuE1_3_carriage_graphics_switch;
    2: ChikatetsuE1_4_carriage_graphics_switch;
	3: ChikatetsuE1_5_carriage_graphics_switch;
	4: ChikatetsuE1_6_carriage_graphics_switch;
	5: ChikatetsuE1_7_carriage_graphics_switch;
	6: ChikatetsuE1_8_carriage_graphics_switch;
	return CB_FAILED;
}


// Underground vs. window switch

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_GFX_switch, extra_callback_info1) {
    /* Decide whether vehicle is drawn on map or in a special window  */
	0x00:			underground_tube_GFX_switch;
	0x10..0x12:		ChikatetsuE1_consist_GFX_switch;
	return ChikatetsuE1_purchase_set;
}


// Refit cost switch

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_refit_cost_switch, var[0x10,8,0xFF] - cargo_subtype) {
    /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	   Refitting to fewer carriages refunds money, while adding carriages costs money.        */
	-6:				-(6*20);
	-5:				-(5*20);
	-4:				-(4*20);
	-3:				-(3*20);
	-2:				-(2*20);
	-1:				-(1*20);
	0:				0;
	1:				(1*20);
	2:				(2*20);
	3:				(3*20);
	4:				(4*20);
	5:				(5*20);
	6:				(6*20);
	return CB_FAILED;
}


// Running cost switch

switch(FEAT_ROADVEHS, SELF, ChikatetsuE1_running_cost_switch, current_speed) {
    /* Running cost reduced to 1/4 if vehicle is not moving. */
	0: 				((cargo_subtype+2)*105)/4;
	return 			(cargo_subtype+2)*105;
}


// Vehicle definition

item(FEAT_ROADVEHS, ChikatetsuE1) {
	property {
		name:               			string(STR_NAME_MAB3_CHIKATETSU_E1);
		climates_available: 			bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
		introduction_date: 				date(2015,4,1);
		model_life:						VEHICLE_NEVER_EXPIRES;
		misc_flags:						bitmask(ROADVEH_FLAG_NO_BREAKDOWN_SMOKE, ROADVEH_FLAG_2CC);
		vehicle_life:					30;
		sprite_id:						SPRITE_ID_NEW_ROADVEH;
		speed:            	 			511 km/h;
		power:							1200 hp;
		tractive_effort_coefficient:	0.18;
		weight:							60 ton;
		cargo_capacity:					80;
		loading_speed:					200;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS, CC_MAIL);
		refit_cost:						0;
		cost_factor:					238;
		running_cost_base:				RUNNING_COST_ROADVEH;
		running_cost_factor:			255;
		length:							7;
		cargo_age_period:				128;
		tram_type:                    	MAB3;
	}
	graphics {
		articulated_part:				ChikatetsuE1_switch_articulated;
		default:						ChikatetsuE1_GFX_switch;
		purchase:						ChikatetsuE1_purchase_set;
		cargo_capacity:					ChikatetsuE1_cargo_capacities_switch;
		running_cost_factor:			ChikatetsuE1_running_cost_switch;
		purchase_running_cost_factor:	return 2*105;
		power:							return (cargo_subtype+2)*60;
		weight:							return (cargo_subtype+2)*121;
		length:							tube_shorten_vehicles;
		sound_effect:					return sound("src/none.wav");
		cargo_subtype_text:				tube_cargo_subtype_text;
		additional_text:				return string(STR_TUBE_PURCHASE_TEXT);
		refit_cost:						ChikatetsuE1_refit_cost_switch;
	}
}

// If the tram param is set, make this a tram

if (param_RV0_or_tram1 == 1) {
	item (FEAT_ROADVEHS, ChikatetsuE1) {
		property {
			misc_flags:						bitmask(ROADVEH_FLAG_TRAM, ROADVEH_FLAG_NO_BREAKDOWN_SMOKE, ROADVEH_FLAG_2CC);
		}
	}
}

// ======= END CHIKATETSU E1 FUTURISTIC =======


// ======= BEGIN CHIKATETSU E4 FUTURISTIC =======

// ChikatetsuE4 Sprites
spriteset(ChikatetsuE4_purchase_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE4Purchase_0.png") {
	[-18, -6]
}

spriteset(ChikatetsuE4_head_visible_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE4Head_0.png") {
	[-16, -5]
}

spriteset(ChikatetsuE4_middle_visible_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE4Middle_0.png") {
	[-16, -5]
}

spriteset(ChikatetsuE4_tail_visible_set, "gfx/graphics/tram/MTRO/Chikatetsu/ChikatetsuE4Tail_0.png") {
	[-16, -5]
}


// Switches

// Articulated consist generation

switch (FEAT_ROADVEHS, SELF, ChikatetsuE4_switch_articulated, extra_callback_info1) {
    1..7: return ChikatetsuE4;
    return CB_RESULT_NO_MORE_ARTICULATED_PARTS;
}


// Capacity switches

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_2_carriage_capacity_switch, position_in_consist) {
	0..1: return 80+(param_capacities*120);
    2..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_3_carriage_capacity_switch, position_in_consist) {
	0..2: return 80+(param_capacities*120);
	3..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_4_carriage_capacity_switch, position_in_consist) {
	0..3: return 80+(param_capacities*120);
	4..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_5_carriage_capacity_switch, position_in_consist) {
	0..4: return 80+(param_capacities*120);
	5..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_6_carriage_capacity_switch, position_in_consist) {
	0..5: return 80+(param_capacities*120);
	6..7: return 0;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_7_carriage_capacity_switch, position_in_consist) {
	0..6: return 80+(param_capacities*120);
	7: return 0;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_cargo_capacities_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: ChikatetsuE4_2_carriage_capacity_switch;
    1: ChikatetsuE4_3_carriage_capacity_switch;
    2: ChikatetsuE4_4_carriage_capacity_switch;
	3: ChikatetsuE4_5_carriage_capacity_switch;
	4: ChikatetsuE4_6_carriage_capacity_switch;
	5: ChikatetsuE4_7_carriage_capacity_switch;
	// 8-carriage vehicles need no reduction in capacity
	return 80+(param_capacities*120);
}

// ChikatetsuE4 visible, positional graphics switches

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_2_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1: 	    ChikatetsuE4_tail_visible_set;
    2..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_3_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1: 		ChikatetsuE4_middle_visible_set;
	2: 		ChikatetsuE4_tail_visible_set;
	3..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_4_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1..2: 	ChikatetsuE4_middle_visible_set;
	3: 		ChikatetsuE4_tail_visible_set;
	4..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_5_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1..3: 	ChikatetsuE4_middle_visible_set;
	4: 		ChikatetsuE4_tail_visible_set;
	5..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_6_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1..4: 	ChikatetsuE4_middle_visible_set;
	5: 		ChikatetsuE4_tail_visible_set;
	6..7: 	invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_7_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1..5: 	ChikatetsuE4_middle_visible_set;
	6: 		ChikatetsuE4_tail_visible_set;
	7: 		invisible;
	return CB_FAILED;
}

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_8_carriage_graphics_switch, position_in_consist) {
	0: 		ChikatetsuE4_head_visible_set;
	1..6: 	ChikatetsuE4_middle_visible_set;
	7: 		ChikatetsuE4_tail_visible_set;
	return CB_FAILED;
}


switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_consist_GFX_switch, cargo_subtype) {
    /* Pass cargo subtype to next switch  */
	0: ChikatetsuE4_2_carriage_graphics_switch;
    1: ChikatetsuE4_3_carriage_graphics_switch;
    2: ChikatetsuE4_4_carriage_graphics_switch;
	3: ChikatetsuE4_5_carriage_graphics_switch;
	4: ChikatetsuE4_6_carriage_graphics_switch;
	5: ChikatetsuE4_7_carriage_graphics_switch;
	6: ChikatetsuE4_8_carriage_graphics_switch;
	return CB_FAILED;
}


// Underground vs. window switch

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_GFX_switch, extra_callback_info1) {
    /* Decide whether vehicle is drawn on map or in a special window  */
	0x00:			underground_tube_GFX_switch;
	0x10..0x12:		ChikatetsuE4_consist_GFX_switch;
	return ChikatetsuE4_purchase_set;
}


// Refit cost switch

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_refit_cost_switch, var[0x10,8,0xFF] - cargo_subtype) {
    /* Refit cost based on difference between target cargo sybtype and current cargo subtype.
	   Refitting to fewer carriages refunds money, while adding carriages costs money.        */
	-6:				-(6*20);
	-5:				-(5*20);
	-4:				-(4*20);
	-3:				-(3*20);
	-2:				-(2*20);
	-1:				-(1*20);
	0:				0;
	1:				(1*20);
	2:				(2*20);
	3:				(3*20);
	4:				(4*20);
	5:				(5*20);
	6:				(6*20);
	return CB_FAILED;
}


// Running cost switch

switch(FEAT_ROADVEHS, SELF, ChikatetsuE4_running_cost_switch, current_speed) {
    /* Running cost reduced to 1/4 if vehicle is not moving. */
	0: 				((cargo_subtype+2)*105)/4;
	return 			(cargo_subtype+2)*105;
}


// Vehicle definition

item(FEAT_ROADVEHS, ChikatetsuE4) {
	property {
		name:               			string(STR_NAME_MAB3_SHINKU_EKI);
		climates_available: 			bitmask(CLIMATE_TEMPERATE, CLIMATE_ARCTIC, CLIMATE_TROPICAL, CLIMATE_TOYLAND);
		introduction_date: 				date(2024,1,1);
		model_life:						VEHICLE_NEVER_EXPIRES;
		misc_flags:						bitmask(ROADVEH_FLAG_NO_BREAKDOWN_SMOKE, ROADVEH_FLAG_2CC);
		vehicle_life:					30;
		sprite_id:						SPRITE_ID_NEW_ROADVEH;
		speed:            	 			511 km/h;
		power:							1200 hp;
		tractive_effort_coefficient:	0.18;
		weight:							120 ton;
		cargo_capacity:					80;
		loading_speed:					200;
		refittable_cargo_classes:		bitmask(CC_PASSENGERS, CC_MAIL);
		refit_cost:						0;
		cost_factor:					238;
		running_cost_base:				RUNNING_COST_ROADVEH;
		running_cost_factor:			255;
		length:							7;
		cargo_age_period:				128;
		tram_type:                    	MAC3;
	}
	graphics {
		articulated_part:				ChikatetsuE4_switch_articulated;
		default:						ChikatetsuE4_GFX_switch;
		purchase:						ChikatetsuE4_purchase_set;
		cargo_capacity:					ChikatetsuE4_cargo_capacities_switch;
		running_cost_factor:			ChikatetsuE4_running_cost_switch;
		purchase_running_cost_factor:	return 2*105;
		power:							return (cargo_subtype+2)*60;
		weight:							return (cargo_subtype+2)*121;
		length:							tube_shorten_vehicles;
		sound_effect:					return sound("src/none.wav");
		cargo_subtype_text:				tube_cargo_subtype_text;
		additional_text:				return string(STR_TUBE_PURCHASE_TEXT);
		refit_cost:						ChikatetsuE4_refit_cost_switch;
	}
}

// If the tram param is set, make this a tram

if (param_RV0_or_tram1 == 1) {
	item (FEAT_ROADVEHS, ChikatetsuE4) {
		property {
			misc_flags:						bitmask(ROADVEH_FLAG_TRAM, ROADVEH_FLAG_NO_BREAKDOWN_SMOKE, ROADVEH_FLAG_2CC);
		}
	}
}

// ======= END CHIKATETSU E4 FUTURISTIC =======
